<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
  
  </head>
<body>
<div style="border:1px solid pink;padding:3px;font-size:20px;background-color:gray;">
<h1 style="color:black">Polymorphism in java</h1>
</div><br>
<p style="font-size:20px;"><b>Polymorphism in Java</b> is a concept by which we can perform a single action in different ways. Polymorphism is derived from 2 Greek words: poly and morphs. The word "poly" means many and "morphs" means forms. So polymorphism means many forms.</p>
<p style="font-size:20px;">There are two types of polymorphism in Java: compile-time polymorphism and runtime polymorphism. We can perform polymorphism in java by method overloading and method overriding.</p>
<br>
<div style="border:1px solid pink; padding:1px; font-size:20px;background-color:gray;">
<h3 style="color:black">Runttime Polymorphism in java</h3></div>
<br>
<p style="font-size:20px;">Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time.</p>
<p style="font-size:20px;">In this process, an overridden method is called through the reference variable of a superclass. The determination of the method to be called is based on the object being referred to by the reference variable.</p>
<p style="font-size:20px;">Let's first understand the upcasting before Runtime Polymorphism.</p>
<br>
<div style="border:1px solid pink; padding:1px; font-size:20px;background-color:gray;">
<h3 style="color:black">Upcasting</h3></div>
<br>
<p style="font-size:20px;">If the reference variable of Parent class refers to the object of Child class, it is known as upcasting.</p>
<br>
<h1 style="color:black">#syntax</h1><br>
<div style="padding-left: 3%; padding-right:640px;">
<pre>
class A
{
}  
class B extends A
{
</pre>
</div>
<br>
<div style="padding-left: 3%; padding-right:640px;">
<pre>
A a=new B();//upcasting
</pre>
</div>
<br>
<div style="border:1px solid pink;padding:2px;font-size:20px;background-color:gray;">
<h1 style="color:black">#Example of Runtime Polymorphism</h1>
</div><br>
<div style="padding-left: 3%; padding-right:640px;">
<pre>
class Bike
{  
  void run()
  {
  System.out.println("running");
  }  
}  
class Splendor extends Bike
{  
  void run()
  {
  System.out.println("running safely with 60km");
  }  
  
  public static void main(String args[])
  {  
    Bike b = new Splendor();//upcasting  
    b.run();  
  }  
}  

//output
	running safely with 60km.
</pre>
</div>
<br>
<div class="container">
  		<ul class="pager">
    <li class="previous"><a href="#">Previous</a></li>
    <li class="next"><a href="#">Next</a></li>
  </ul>
</div>
</body>
</html>
